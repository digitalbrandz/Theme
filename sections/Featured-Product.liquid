{% if section.settings.product != '' %}
{% assign product = all_products[section.settings.product] %}
<script>
  window.featuredproduct =  {{ product | json }};
</script>
{% style %}


#shopify-section-{{ section.id}} .product-details .product-add .add {
  background: {{ section.settings.add_background_color }};
  color: {{ section.settings.add_font_color }};
}
#shopify-section-{{ section.id}} .swatch .swatch-element input:checked+label {
    border-color: {{ section.settings.options_border_color }};
}
#shopify-section-{{ section.id}} .product-details .product-add .ajaxified-cart-feedback, .product-wrap .product-top .product-details .product-add .ajaxified-cart-feedback.success {
    color: #000000;
}
#shopify-section-{{ section.id}} .product-details .product-add .ajaxified-cart-feedback a {
  color: {{ section.settings.add_background_color }};
}





{% if section.settings.css != nil %}
{{ section.settings.css | replace: '&gt;', '>' }}
{% endif %}
{% endstyle %}
<div class="frontpage-product-wrap">
<div class="row">
   <div class="large-12 columns text-center">
      {% assign titlearray = section.settings.section_title | split: ' ' %}
      {% capture titlesize %}{{ titlearray | size  }}{% endcapture %}
      {% assign titlesize = titlesize | minus: 1 %}
      {% for word in titlearray %}
      {% if word == titlearray[titlesize] %}
      <span class="last-word letter-wrap">{% endif %}{% if forloop.last == true %}{{ word }}</span>{% else %}{{ word }}{% endif %}
      {% endfor %}
   </div>
</div>


<div id="frontpage-product-{{ product.id }}" class="frontpage-product {{ product.handle }}" itemscope itemtype="http://schema.org/Product">
   <div class="inner-product">
      {% assign add_to_cart = 'Add to cart' %}
      {% assign sold_out = 'Sold Out' %}
      {% assign unavailable = 'Unavailable' %}
      <meta itemprop="url" content="{{ shop.url }}{{ product.url }}" />
      <meta itemprop="image" content="{{ product | img_url: 'grande' }}" />
   
         <!-- Product thumb -->

            <div class="row rowsmall align-center align-middle">
               <div class="large-7 medium-7 small-12 column slide-inner">
                  <div id="productslider" class="swiper-container">
                     <div class="swiper-wrapper">
                        {% for image in product.images %}
                        <div class="swiper-slide"> 
                           <img src="{{ image | product_img_url: '1024x1024' }}" />
                        </div>
                        {% endfor %}
                     </div>
                     <div class="swiper-pagination"></div>
                  </div>

               </div>
               <div class="large-5 medium-5 small-12 columns">
                   <div class="product-details">
                     {% comment %}
                     <!-- Yotpo Reviews Summary code -->   
                     {% assign yotpoappkey = settings.yotpo_reviews | split: 'yotpo.com/' %}                 
                     {% assign yotpoappkey = yotpoappkey.last | split: '/widget' %}              
                     <div class="yotpo bottomLine yotpoextra"
                        data-appkey="{{ yotpoappkey.first }}"
                        data-domain="{{ shop.permanent_domain | escape }}"
                        data-product-id="{{ product.id }}"
                        data-product-models="{{ product.id }}"
                        data-name="{{ product.title | escape }}"
                        data-url="{{ shop.url }}{{ product.url }}"
                        data-image-url="{{ product.featured_image | product_img_url: 'large' |replace: '?', '%3F' | replace: '&','%26'}}"
                        data-description="{{ product.description | escape }}"
                        data-bread-crumbs="{% for tag in product.tags %}{{ tag | escape }};{% endfor %}">
                     </div>
                     <!-- END Yotpo Reviews Summary code -->  
                     {% endcomment %}
                     <h2>{{ product.title }}</h2>
                     <p>
                     {{ section.settings.product_desc }}
                     </p>
                     
                     
                 {% form 'product', product %}  
      {% assign hide_default_title = false %}
      {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
        {% assign hide_default_title = true %}
      {% endif %}       

    {% if settings.boldoptions %}
      <div class="bold_options" data-product-id="{{ product.id }}"></div>
    {% endif %}           
                     
    
    
     <div id="product-variants-{{ product.id }}" class="product-variants {% if hide_default_title %}  hidden{% endif %}">
              <select id="product-select-{{ section.id }}" name="id"> 
                {% for variant in product.variants %}  
                <option{% if variant == product.selected_or_first_available_variant %} selected{% endif %} value="{{ variant.id }}">     
                  {{ variant.title }} - {{ variant.price | money }}    
                </option>  
                {% endfor %} 
              </select>
            {% if product.variants.size >= 1 %}
            {% for option in product.options %}
            {% include 'swatch' with option %}
            {% endfor %}
            {% endif %}
            </div>  
                         
                         
                  
                         
         {% if settings.boldsubscriptions %}                    
       <div class="ro_widget"></div>      
      {% endif %}
  
  
  
      <div class="product-price-wrap" id="product-price-{{ product.id }}" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}" />
        {% if product.available %}
        <link itemprop="availability" href="http://schema.org/InStock" />
        {% else %}
        <link itemprop="availability" href="http://schema.org/OutOfStock" />
        {% endif %}
          {% assign variant = product.selected_or_first_available_variant %}
          {% if product.compare_at_price > product.price %}
          <span class="product-price on-sale" itemprop="price">{{ variant.price | money }}</span>
          <s class="product-compare-price">{{ variant.compare_at_price | money }}</s>
          {% else %}
          <span class="product-price" itemprop="price">{{ variant.price | money }}</span>
          {% endif %}
      </div>
                      
{% if settings.quadpay %}    
{% comment %} <!-- Insert QuadPay Widget --> {% endcomment %}
<div style="margin: 0 0 10px 0; min-height: 20px;">
  <quadpay-widget amount={{ variant.price | divided_by: 100.00 }}   breakpointAlignment="1022 center"></quadpay-widget>
</div>       
{% endif %}                     
    
                     
      <div class="product-add">
        <button id="add-{{ product.id }}" class="button shopify-payment-button__button add {% if settings.boldsubscriptions %}addtocart{% endif %}" type="submit">{{ add_to_cart | escape }}</button>
        {{ form | payment_button }}
      </div>
              {% endform %}           
                     
                  </div>
              </div>
            </div>

         <!-- END Product thumb -->
     
   </div>
</div>
</div>  



<script>
// activate Ajax Cart
  function defer{{ section.id }}AjaxifyCart(method{{ section.id }}AjaxifyCart) {
 if (window.Shopify.AjaxifyCart) {
  method{{ section.id }}AjaxifyCart();
 } else {
  setTimeout(function() {
   defer{{ section.id }}AjaxifyCart(method{{ section.id }}AjaxifyCart)
  }, 50);
 }
}
defer{{ section.id }}AjaxifyCart(function() {
 Shopify.AjaxifyCart.init();
});
  
// activate shopify payment buttons
function defer{{ section.id }}ShopifyPaymentButtons(method{{ section.id }}ShopifyPaymentButtons) {
 if (window.Shopify.PaymentButton) {
  {% if settings.boldoptions %}
  var page = document.querySelector('#shopify-section-{{ section.id }}');
  var boldWrapper = page.querySelector('.bold_options');
  function defer{{ section.id }}BoldButtons(method{{ section.id }}BoldButtons) {
   if (boldWrapper.classList.contains("bold_options_loaded")) {
    setTimeout(function() {
     if (boldWrapper.innerHTML.trim().length > 0) {
      // remove dynamic buttons
      var existingButtons = page.querySelector('.shopify-payment-button');
      existingButtons.remove();
     } else {
      method{{ section.id }}BoldButtons();
     }
    }, 50);
   } else {
    setTimeout(function() {
     defer{{ section.id }}BoldButtons(method{{ section.id }}BoldButtons)
    }, 50);
   }
  }
  defer{{ section.id }}BoldButtons(function() {
   Shopify.PaymentButton.init();
  }); 
  {% else %}
  method{{ section.id }}ShopifyPaymentButtons(); 
  {% endif %}
 } else {
  setTimeout(function() {
   defer{{ section.id }}ShopifyPaymentButtons(method{{ section.id }}ShopifyPaymentButtons)
  }, 50);
 }
}
defer{{ section.id }}ShopifyPaymentButtons(function() {
 Shopify.PaymentButton.init();
});   
  
  
// activate bold on product form  
{% if settings.boldoptions %}
var page = document.querySelector('#shopify-section-{{ section.id }}');
var boldWrapper = page.querySelector('.bold_options');
function defer{{ section.id }}BoldForm(methodBoldForm) {
 if (boldWrapper.classList.contains("bold_options_loaded")) {
  setTimeout(function() {
   if (boldWrapper.innerHTML.trim().length > 0) {
    method{{ section.id }}BoldForm();
   }
  }, 900);
 } else {
  setTimeout(function() {
   defer{{ section.id }}BoldForm(method{{ section.id }}BoldForm)
  }, 50);
 }
}
defer{{ section.id }}BoldForm(function() {
 var form = page.querySelector('form');
 form.classList.add('bold');
}); 
{% endif %}  
  
  
{% if settings.boldsubscriptions %}
var page = document.querySelector('#shopify-section-{{ section.id }}');
var roWrapper = page.querySelector('div.ro_widget');  
// if form action changes  
// Select the node that will be observed for mutations
// Options for the observer (which mutations to observe)
// Callback function to execute when mutations are observed
var handleRO = function(mutationsList, observer) {
    // Use traditional 'for loops' for IE 11
    for(let mutation of mutationsList) {
        if (mutation.type === 'childList') {
            console.log('A child node has been added or removed.');
var shopifyButtons = page.querySelector('.shopify-payment-button');          
shopifyButtons.remove();   
roWrapper.addEventListener('click', triggerAjaxify); 
function triggerAjaxify(e) {
  e.stopPropagation();
  var pForm = e.currentTarget.closest('form');
  if(pForm.action.includes('cart/add') && e.target.type == 'radio') {
 Shopify.AjaxifyCart.init();
    }  
}
            roObserver.disconnect();
        }
    }
};
// Create an observer instance linked to the callback function
var roObserver = new MutationObserver(handleRO);
// Start observing the target node for configured mutations
roObserver.observe(roWrapper, { attributes: true, childList: true, subtree: true });
{% endif %}   
  
// activate swatch  
var page = document.querySelector('#shopify-section-{{ section.id }}');
var swatches = page.querySelectorAll('.swatch input[type=radio]');
var featuredimage = page.querySelector('.Product-Video-Gallery-main img');
swatches.forEach(radio => radio.addEventListener('change', function() {
 var optionIndex = this.closest('.swatch').getAttribute('data-option-index');
 var optionValue = this.value;
 var thingitwants = this.closest('form').querySelectorAll('.single-option-selector')[optionIndex];
 thingitwants.value = optionValue;
  if(featuredimage) {
    var newImage = this.getAttribute('image');
    if(newImage) {
    featuredimage.src = this.getAttribute('image');
    }
   //featuredimage.src = '';
  }
 thingitwants.onchange();
}));
  
  
  
{% unless videourl == blank %}
  var videowrap = document.querySelector('#shopify-section-{{ section.id }} .Product-Video-Gallery-main');
  videowrap.addEventListener('click', clickMute{{ section.id }})  
  
  function clickMute{{ section.id }}() {
 
    if(!this.classList.contains('unmute')){
     this.classList.add('unmute');
     this.querySelector('video').muted = false;
    }else{
     this.classList.remove('unmute');
     this.querySelector('video').muted = true;    
    }
  }                        
  
  
  // resume playback after window loses focus
  window.addEventListener('focus', resumevideo{{ section.id }}, false);
  
  function resumevideo{{ section.id }}() {
    videowrap.querySelector('video').play();
  }
  
  // if jqm on this page hide remove event listener
   var jqmpage = videowrap.closest('[data-role=page]');
    $(document).on("pagebeforehide", jqmpage, function(event) {
     window.removeEventListener('focus', resumevideo{{ section.id }}, false);         
     videowrap.classList.remove('unmute');
     videowrap.querySelector('video').muted = true;    
    });
     
    
  
{% endunless %}  
  
  
  
  
  
var selectCallback = function(variant, selector) {
 if (variant) {
  var formEl = document.querySelector('#' + selector.domIdPrefix).closest('form');
  for (var i = 0, length = variant.options.length; i < length; i++) {
   var radioButton = formEl.querySelector('.swatch[data-option-index="' + i + '"] input[value="' + encodeURI(variant.options[i]) + '"]');
   if (radioButton !== null) {
    radioButton.checked = true;
   }
  }
  // Selected a valid variant that is available.
  if (variant.available) {
   // Enabling add to cart button.
   var addToCartButton = formEl.querySelector('#add-{{ product.id }}');
   if (addToCartButton !== null) {
    addToCartButton.classList.remove('disabled');
    addToCartButton.disabled = false;
    addToCartButton.value = '{{ add_to_cart | json }}';
   }
   var backorderEl = formEl.querySelector('#backorder-{{ product.id }}');
   // If item is backordered yet can still be ordered, we'll show special message.
   if (variant.inventory_management && variant.inventory_quantity <= 0) {
    var selectedVariant = formEl.querySelector('#selected-variant-{{ product.id }}');
    if (selectedVariant !== null) {
     selectedVariant.innerHTML = '{{ product.title | json }}{% unless hide_default_title %} + ' - ' + variant.title{% endunless %}';
    }
    if (backorderEl !== null && backorderEl !== undefined) {
     backorderEl.classList.remove('hidden');
    }
   } else {
    if (backorderEl !== null && backorderEl !== undefined) {
     backorderEl.classList.add('hidden');
    }
   }
  } else {
   // Variant is sold out.
   if (backorderEl !== null && backorderEl !== undefined) {
    backorderEl.classList.add('hidden');
   }
   if (addToCartButton !== null && addToCartButton !== undefined) {
    addToCartButton.value = '{{ sold_out | json }}';
    addToCartButton.classList.add('disabled');
    addToCartButton.disabled = true;
   }
  }
  var pricewrapEl = formEl.parentElement.querySelector('#product-price-{{ product.id }}');
  var priceEl = pricewrapEl.querySelector('.product-price');
  // Whether the variant is in stock or not, we can update the price and compare at price.
  if (variant.compare_at_price > variant.price) {
   priceEl.innerHTML = Shopify.formatMoney(variant.price, "{{ shop.money_format }}");
   var compareEl = pricewrapEl.querySelector('.product-compare-price');
   if (compareEl == null) {
    var compareEl = document.createElement("s");
    compareEl.classList.add('product-compare-price');
    pricewrapEl.append(compareEl);
   }
   compareEl.innerHTML = Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}");
  } else {
   priceEl.innerHTML = Shopify.formatMoney(variant.price, "{{ shop.money_format }}");
  }
  {% if settings.quadpay %} 
  {% assign new_money_format = shop.money_format | remove: '$' %}
  var quadpayWidget = formEl.querySelector('quadpay-widget');
  quadpayWidget.setAttribute('amount', Shopify.formatMoney(variant.price, "{{ new_money_format }}")); 
  {% endif %}
 } else {
  // variant doesn't exist.
  priceEl.innerHTML = '';
  if (compareEl != null) {
   compareEl.innerHTML = '';
  }
  if (backorderEl !== null) {
   backorderEl.classList.add('hidden');
  }
  if (addToCartButton !== null) {
   addToCartButton.value = '{{ unavailable | json }}';
   addToCartButton.classList.add('disabled');
   addToCartButton.disabled = true;
  }
 }
}; 
new Shopify.OptionSelectors('product-select-{{ section.id }}', {
 product:  {% if settings.boldoptions %}{%- include 'bold-product', output: 'json' -%}{% else %}{{ product | json }}{% endif %},
 onVariantSelected: selectCallback,
 enableHistoryState: false
}); 
// Add label if only one product option and it isn't 'Title'.
{% if product.options.size == 1 and product.options.first != 'Title' %}
$('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>'); 
{% endif %}  
                                     
                                     
var callback{{ section.id }}Product_Video_Gallery = function(){
  // Handler when the DOM is fully loaded
  if(!window.Swiper) {
    // add script
    var script = document.createElement("script");
    script.type = "text/javascript";   
    script.src = 'https://cdn.jsdelivr.net/npm/swiper@{{ settings.swiperjsversion }}/js/swiper.min.js';
    document.getElementsByTagName("head")[0].appendChild(script);
    // add style
    var style = document.createElement("link");
    style.type = "text/css";  
    style.rel = "stylesheet";
    style.href = 'https://cdn.jsdelivr.net/npm/swiper@{{ settings.swiperjsversion }}/css/swiper.min.css';
    document.getElementsByTagName("head")[0].appendChild(style);
  }
  if(!window.jQuery.fancybox) {
    // add script
    var script = document.createElement("script");
    script.type = "text/javascript";   
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/fancybox/{{ settings.fancybox3version }}/jquery.fancybox.min.js';
    document.getElementsByTagName("head")[0].appendChild(script);  
    setTimeout(function() {
 
    })
    // add style
    var style = document.createElement("link");
    style.type = "text/css";  
    style.rel = "stylesheet";
    style.href = 'https://cdnjs.cloudflare.com/ajax/libs/fancybox/{{ settings.fancybox3version }}/jquery.fancybox.min.css';
    document.getElementsByTagName("head")[0].appendChild(style); 
  }
  
};
if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
) {
  callback{{ section.id }}Product_Video_Gallery();
} else {
  document.addEventListener("DOMContentLoaded", callback{{ section.id }}Product_Video_Gallery);
}
      
function defer{{ section.id }}Product_Video_gallery(method{{ section.id }}Product_Video_gallery) {
    if (window.jQuery && window.Swiper && window.jQuery.fancybox) {
        method{{ section.id }}Product_Video_gallery();
    } else {
        setTimeout(function() { defer{{ section.id }}Product_Video_gallery(method{{ section.id }}Product_Video_gallery) }, 50);
    }
}
defer{{ section.id }}Product_Video_gallery(function () {    
   
     startSlider{{ section.id }}();  
function startSlider{{ section.id }}() {
   
      var container = document.querySelector('#shopify-section-{{ section.id }} .gallery-thumbs');
  
      var swiper = new Swiper((container), {         
      spaceBetween: 10,
      slidesPerView: 'auto',
      loop: false,
      direction: 'horizontal',
      loopedSlides: 5, //looped slides should be the same
      cssMode: true
      });   
} 
    
  
});
</script>        




{% endif %}

{% schema %}
  {
    "name": "Featured Product",
    "settings": [{
       "id": "section_title",
       "type": "text",
       "label": "Section Title"
      },
      {
        "id": "product",
        "type": "product",
        "label": "Product"
      },
      {
        "id": "product_desc",
        "type": "textarea",
        "label": "Small Description"
      },
{ "type":"header",
"content": "Product Options Style"
},
{
       "id": "options_border_color",
       "type": "color",
       "label": "Product Options Border Color",
       "default": "#d85089"
},
{ "type":"header",
"content": "Add to Cart Style"
},
{
       "id": "add_background_color",
       "type": "color",
       "label": "Add to Cart Background Color",
       "default": "#d85089"
},{
       "id": "add_font_color",
       "type": "color",
       "label": "Add to Cart Font Color",
       "default": "#FFFFFF"
},
{
 "type": "header",
 "content": "Additional Custom CSS"
},
{
        "id": "css",
        "type": "html",
        "label": "Custom CSS",
	"info": "Use [Font 2 Web](http://www.font2web.com/) to convert fonts"
}],
  "presets": [
    {
      "name": "Featured Product",
      "category": "Product"
    }
  ]
  }
{% endschema %}

{% stylesheet 'scss' %}
@mixin bp($point) {
  
  $bp-small: "(max-width: 350px)";
  $bp-mobile: "(max-width: 600px)";
  $bp-mobileup: "(min-width: 600px)";
  $bp-phablet: "(max-width: 1022px)";
  $bp-phabletup: "(min-width: 1022px)";
  $bp-tablet: "(max-width: 1280px)";
  $bp-tabletup: "(min-width: 1280px)";
  $bp-laptop: "(max-width: 1600px)";
  $bp-desktop: "(min-width: 1600px)";
  @if $point == desktop {
    @media #{$bp-desktop}  { @content; }
  }  
  @else if $point == laptop {
    @media #{$bp-laptop} { @content; }
  }
  @else if $point == tablet {
    @media #{$bp-tablet} { @content; }
  }
  @else if $point == tabletup {
    @media #{$bp-tabletup} { @content; }
  }
  @else if $point == phablet {
    @media #{$bp-phablet} { @content; }
  }
  @else if $point == phabletup {
    @media #{$bp-phabletup} { @content; }
  }
  @else if $point == mobile {
    @media #{$bp-mobile}  { @content; }
  }
  @else if $point == mobileup {
    @media #{$bp-mobileup} { @content; }
  }
  @else if $point == small {
    @media #{$bp-small}  { @content; }
  }

}

//color transition
@mixin transition($attribute, $duration) {
    -webkit-transition: $attribute $duration ease;
    -moz-transition: $attribute $duration ease;
    transition: $attribute $duration ease;
}


.frontpage-product-wrap {
  padding: 0px 0 60px 0; 
  @include bp(mobile) {
    padding: 0px 0 60px 0;
  }
    & .row {
     max-width: 85em;
    }
    & .slide-inner {
      @include bp(phablet) {
      margin-bottom: 20px;
      }
      & .swiper-slide {
         & img {
    width: 100%;
       }
     }
    }
    & .product_form {
    margin-top: 15px;
    }
    & .stamped-product-reviews-badge {
    @include bp(phablet) {
    display: block !Important;
    text-align: center;
    }
    }
 & .product-details {
    & h2 {
    font-family: 'Open Sans', sans-serif;
    /* text-transform: uppercase; */
    letter-spacing: 0px;
    font-size: 41px;
    line-height: 41px;
    font-weight: bold;
     @include bp(mobile) {
            font-size: 26px;
           line-height: 30px;
          font-weight:normal;
           text-align: center;
      }
     }
   & .product-price-wrap {
       @include bp(phablet) {
   text-align: center;
       }
   }
   & .product-price {
       color: #000000;
    letter-spacing: 0px;
    -webkit-font-smoothing: antialiased;
    font-size: 33px;
    display: inline-block;
    margin-bottom: 0px;
     @include bp(phablet) {
    font-size: 22px;
    text-align: center;
     }
   }
   
   & .bold_option_title {
       margin-bottom: 10px;
       display: block;
   }
   & .bold_option_element {
     & select {
     background-color: transparent;
    padding: 15px 30px 15px 20px;
     }
   }
   & .bold_option_total span {
    color: #ea75a5;
   }
   
   
    & .jdgm-widget {
     & a {
      color:#ff4da2;
     }
    }
    & #product-price {
    color: #A3A3A3;
    letter-spacing: 0px;
    -webkit-font-smoothing: antialiased;
    font-family: 'Gotham';
    font-size: 22px; 
     @include bp(mobile) {
          text-align: center; 
     }
    }
    & .yotpo {
      margin: 20px 0;
      @include bp(mobile) {
           margin: 10px 0 15px; 
      }
      & a {
       color: #000000 !important;
      }
      & .yotpo-stars {
       display: inline-block;
    margin-right: 10px;
    vertical-align: bottom; 
      }
     & .yotpo .yotpo-bottomline .yotpo-icon-empty-star {
       color: #f2b85e;
     }
      & .pull-left {
       @include bp(mobile) {
        text-align:center; 
         float:none;
       }
      }
    }
    & .details {
    text-shadow: none;
    margin: 20px 0;
          font-size: 18.45px;
font-family: 'Open Sans', sans-serif;
    letter-spacing: 0.025em;
    line-height: 1.6;
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    text-rendering: optimizeSpeed;
       & ul {
             padding-left: 18px;
       & li {
            margin-bottom: 8px; 
        }
       }
    }
    & .product-variants {
         margin: 20px 0;
     & label  {
          font-weight: bold; 
           text-transform: capitalize;
     }
      &.hidden {
       display:none;
      }
    }
    & .bold_options {
     & .bold_option_title {
       font-weight: bold;
           text-transform: capitalize;
     }
    }  

    & .product-add {
    margin-top: 20px;
     & a {
          color: #9e3a8e; 
     }
     & .ajaxified-cart-feedback.success {
         color: #ea75a5;
     }
& .shopify-payment-button__button--unbranded {
      background-color: #000000;
  }
  & [type=button].shopify-payment-button__button--hidden {
      display:none;
  }
  & .add {
    background: #d85089;
    color:#fff;
    text-transform: uppercase;
    font-weight: bold;
  }
    & button {
       width:100%;
  }
    }
   } 
}

{% endstylesheet %}

{% javascript %}
{% endjavascript %}          
